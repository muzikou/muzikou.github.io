(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{373:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"_1-默认约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-默认约定"}},[t._v("#")]),t._v(" 1. 默认约定")]),t._v(" "),a("p",[a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("webpack")])],1),t._v(" 的 "),a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("4.x ")])],1),t._v(" 版本中默认约定:")]),t._v(" "),a("ol",[a("li",[t._v("打包的 入口文件为 "),a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("src -> index.js")])],1)]),t._v(" "),a("li",[t._v("打包的 输出文件为 "),a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("dist -> main.js")])],1)])]),t._v(" "),a("h3",{attrs:{id:"_2-默认配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-默认配置文件"}},[t._v("#")]),t._v(" 2. 默认配置文件")]),t._v(" "),a("p",[t._v("默认的配置⽂件是 webpack.config.js，执行下面的命令后，webpack 能找到该文件，并使用执行：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npx webpack\n")])])]),a("p",[t._v("如果不想使用默认的配置文件，可以使用下面的命令实现自定义 webpackconfig.js ⽂件来作为配置⽂件并执⾏：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npx webpack --config webpackconfig.js\n")])])]),a("h3",{attrs:{id:"_3-修改打包文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-修改打包文件"}},[t._v("#")]),t._v(" 3. 修改打包文件")]),t._v(" "),a("p",[t._v("修改打包的入口与出口，可以在配置文件 "),a("em",[t._v("webpack.config.js")]),t._v(" 中新增加如下配置信息")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 导入 node.js 中专门操作路径的模块 path")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定打包的 入口文件")]),t._v("\n    entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/index.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定打包后的资源位置")]),t._v("\n    output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./dist'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出文件的存放路径")]),t._v("\n        filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index.js'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出文件的名称")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-项目打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-项目打包"}},[t._v("#")]),t._v(" 4. 项目打包")]),t._v(" "),a("p",[t._v("在终端中运行如下命令，测试打包入口与出口是否更改")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm run dev\n")])])]),a("p",[t._v("打包完成之后，会在 "),a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("dist")])],1),t._v(" 文件夹里面 会自动生成 "),a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("index.js")])],1),t._v(" ,")]),t._v(" "),a("p",[t._v("然后再重新引入打包之后的文件，运行 "),a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("index.html")])],1),t._v("，依然可以照常运行。")]),t._v(" "),a("p",[t._v("但是此时我们会发现，每次 "),a("em",[a("font",{attrs:{color:"#d63200"}},[t._v("js")])],1),t._v(" 更改之后我们都需要重新手动打包，那要怎么样才能是实现自动打包的功能呢？请看下一篇文章 "),a("router-link",{attrs:{to:"/webpack/server.html"}},[t._v("配置自动打包")])],1)])}),[],!1,null,null,null);s.default=e.exports}}]);